# Use Grml zsh config with git unstash chages shown
#source ~/.config/zsh/grml-config

# Archlinux update
alias maj='sudo nixos-rebuild switch --upgrade'

# Start ranger file navigator
alias r='ranger'

# search for something
alias gr='grep --color=auto -Rn'

# use htop instead of top
alias top='htop'

function mydu(){
du -x --max-depth=1 | sort -rn | \
  awk -F / -v c=$COLUMNS 'NR==1{t=$1} NR>1{r=int($1/t*c+.5); b="\033[1;31m"; for (i=0; i<r; i++) b=b"#"; printf " %5.2f%% %s\033[0m %s\n", $1/t*100, b, $2}'| tac
}

# colored bar graph du
alias d='mydu'

# Add local gem to PATH (use only in --user-install mode)
# export PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH"
#

_ranger () {
 command ranger "$(pwd)" <$TTY
 print -n "\033[A"
 zle && zle -I
 cd "$(grep \^\' ~/.config/ranger/bookmarks | cut -b3-)"
}

zle -N _ranger
bindkey -v '^N' _ranger

function docker-clean (){
# Delete all stopped containers (including data-only containers).
docker ps -a -q --no-trunc --filter "status=exited" | xargs --no-run-if-empty docker rm -v

# Delete all tagged images more than a month old
# (will fail to remove images still used).
docker images --no-trunc --format '{{.ID}} {{.CreatedSince}}' | grep ' months' | awk '{ print $1 }' | xargs --no-run-if-empty docker rmi || true

# Delete all 'untagged/dangling' (<none>) images
# Those are used for Docker caching mechanism.
docker images -q --no-trunc --filter dangling=true | xargs --no-run-if-empty docker rmi

# Delete all dangling volumes.
docker volume ls -qf dangling=true | xargs --no-run-if-empty docker volume rm
}

# Python startup script:
#export PYTHONSTARTUP=~/.python_startup.py

# Permit line edit in vim :)
zle -N        edit-command-line
bindkey -v '^V' edit-command-line

# Add GO path
export GOPATH=/home/mmercier/Projects/go

# Add local completion settings
fpath=(~/.zsh/completions $fpath)
autoload -U compinit
compinit

# import direnv hook
eval "$(direnv hook zsh)"

# get realpath of an executable
rp() {
    realpath $(which $1)
}

# ctrl-A goes to the beginning of the line even in vim mode
bindkey "^A" vi-beginning-of-line
# ctrl-E goes to the ending of the line even in vim mode
bindkey "^E" vi-end-of-line
